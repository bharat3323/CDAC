Today's topics
1. Revise Collection Framework Overview
2. Complete CRUD(Create , Retrieve,Update,Delete, Searching ) in CMS case study
3. Sorting in Java
4. Attaching Iterators & ListIterators

1. Revise Collection Framework overview

Refer - "Java Collection Framework.pdf"
1.1 List Features -
1.2 List API
1.3 List implementation classes -
1.4 Constructors n methods


A correction - For JDK 11 +
In default constructor , init capa=0, when you add any element then it becomes 10 & then it 1.5 times of that there onwards.

In ArrayList(Collection c)  - size=c.size & capacity=size.

NOTE -
In case of List ,
 If the searching criteria is based upon UID (Primary Key) , eg Customer : email , BanKAccount - acct no , Emp - emp id
 - you can directly use
 - contains , indexOf,lastIndexOf,remove(Object o)
Otherwise , till you use functional streams API 
 - you will have to iterate over the list (for-each) n write the code.


2. Solve Options in CMS case study using List (ArrayList)
Port Existing array based case study to ArrayList
Add 2 more validation rules
validate email 
- reg expression : "^[a-z][a-z0-9._-]*@[a-z]+\\.(com|org|net)$"

validate customer type & reg amount

1. Sign up (customer registration)
Accept customer details
Validate all inputs.
In case of successful validations , display customer details via toString or display error mesg via custom exception.


Sample Data - To Populate the data structure
new Customer("Amit", "Sharma", "amit@gmail.com", "amit@123", 1000, LocalDate.of(1990, 5, 12), ServicePlan.SILVER)
    new Customer("Priya", "Verma", "priya@gmail.com", "priya@123", 2000, LocalDate.of(1995, 8, 23), ServicePlan.GOLD)
    new Customer("Rahul", "Patil", "rahul@yahoo.com", "rahul@123", 5000, LocalDate.of(1988, 1, 3), ServicePlan.DIAMOND)
    new Customer("Sneha", "Kulkarni", "sneha@gmail.com", "sneha@123", 10000, LocalDate.of(1992, 11, 17), ServicePlan.PLATINUM),
    new Customer("Vikas", "Rao", "vikas@gmail.com", "vikas@123", 2000, LocalDate.of(1998, 6, 29), ServicePlan.GOLD)
    new Customer("Meera", "Joshi", "meera@gmail.com", "meera@123", 1000, LocalDate.of(2000, 2, 14), ServicePlan.SILVER),
    new Customer("Arjun", "Deshmukh", "arjun@gmail.com", "arjun@123", 5000, LocalDate.of(1985, 9, 5), ServicePlan.DIAMOND)
    new Customer("Kavya", "Iyer", "kavya@gmail.com", "kavya@123", 10000, LocalDate.of(1993, 12, 25), ServicePlan.PLATINUM)

2. Sign in (login)
i/p : email n password
o/p : Successful login message or error message(Invalid email or password -via custom exception)

3. Change password
i/p : email n old password n new password
o/p : Successful password updation  or error message(Invalid email or password -via custom exception)

4. Un subscribe customer
i/p : customer email

5. Display all customers.

6. Display all customer's complete names , having specified plan & born after specific date
i/p : plan & date

7. Sort customers as per email
8. Sort customers as per reg amount
9. Sort customers as per dob & reg amount

API (method) of java.util.Collections class
 - Collections : helper class containing static methods for manipulating collections
   eg - sorting , shuffling, setting values , synchronization....
- public static void sort(List<T> list)
 - It sorts the elements in the given list as per natural ordering (based upon Comparable interface)
- It is a stable sort. (i.e does not swap or change positions of the elements in case of same result)
 - Implementation Note
  - Uses Tim Sort (based upon Iterative Merge sort)
 - Offers time complexity O(n log n)
 - Offers better performance , in case if the list is at least sorted partially.

eg . Collections.sort(list);
 1. javac checks if data type of the list (eg . Customer , BankAccount , Employee, ...) has implemented java.lang.Comparable i/f
 - if not javac error !

2. If yes - no javac error
JVM uses Tim  Sort interally 
Suppose - [c1,c2,c3,.......c100] - list of customer references
 It invokes c1.compareTo(c2) 
 <0 - no swapping
 =0 - no swapping (i.e stable sort)
 > 0 - swapping

Continues in the same manner.

3. Iterators in Java
3.1 Attach Iterator to Integer List
3.2 Any exceptions ? (Popular questions!)
3.3 Any limitations ?
3.4 Enter ListIterator

4. Solve
4.1 String[] names= {"one","two","three","four","five"};
ArrayList<String> strings=new ArrayList<>();
for(String s : names)
 strings.add(s); 
for(int i=0;i<strings.size();i++)
 strings.remove(i);
System.out.println(strings); 

4.2 Try to remove the strings using for-each

4.3 Point - Any time to remove the elems from the Collection(List n Set implementation classes) , BEST option : use Iterator's remove.
ONLY till you enter - functional programming !
4.4 ListIterator API
public boolean hasPrevious()
public E previous();
public int previousIndex()
public int nextIndex()
public void add(E element)

Objective : Display strings in reverse order, using ListIterator


